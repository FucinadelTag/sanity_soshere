"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _resolve = require("./backends/resolve");

var storageBackend = (0, _resolve.resolveBackend)();
var set$ = new _rxjs.Subject();

var prefixNamespace = function prefixNamespace(ns, key) {
  return "".concat(ns, "::").concat(key);
};

var updates$ = set$.pipe((0, _operators.switchMap)(function (event) {
  return storageBackend.set(event.key, event.value).pipe((0, _operators.map)(function (nextValue) {
    return {
      key: event.key,
      value: nextValue
    };
  }));
}));

var _listen = function listen(key, defValue) {
  return (0, _rxjs.merge)(storageBackend.get(key, defValue), updates$.pipe((0, _operators.filter)(function (update) {
    return update.key === key;
  }), (0, _operators.map)(function (update) {
    return update.value;
  })));
};

var _set = function set(key, value) {
  set$.next({
    key: key,
    value: value
  });
};

var _forNamespace = function _forNamespace(ns) {
  return {
    forKey: function forKey(key) {
      var namespacedKey = prefixNamespace(ns, key);
      return {
        listen: function listen(defaultValue) {
          return _listen(namespacedKey, defaultValue);
        },
        set: function set(value) {
          return _set(namespacedKey, value);
        },
        del: function del() {
          return _set(namespacedKey, undefined);
        }
      };
    },
    listen: function listen(key, defaultValue) {
      return _listen(prefixNamespace(ns, key), defaultValue);
    },
    set: function set(key, value) {
      return _set(prefixNamespace(ns, key), value);
    },
    del: function del(key) {
      return _set(prefixNamespace(ns, key), undefined);
    },
    forNamespace: function forNamespace(sub) {
      return _forNamespace(prefixNamespace(ns, sub));
    }
  };
};

var _default = {
  forNamespace: _forNamespace
};
exports.default = _default;