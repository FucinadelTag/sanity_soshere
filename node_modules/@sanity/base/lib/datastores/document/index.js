"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rxjs = require("rxjs");

var _documentStore = _interopRequireDefault(require("@sanity/document-store"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _getPairListener = require("./getPairListener");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fetchDocumentSnapshot(id) {
  return _client.default.observable.getDocument(id).pipe((0, _operators.map)(function (document) {
    return {
      type: 'snapshot',
      document: document
    };
  }));
}

function fetchQuerySnapshot(query, params) {
  return _client.default.observable.fetch(query, params).pipe((0, _operators.map)(function (documents) {
    return {
      type: 'snapshot',
      documents: documents
    };
  }));
}

var serverConnection = {
  byIdPair: function byIdPair(idPair) {
    return (0, _getPairListener.getPairListener)(idPair);
  },
  byId: function byId(id) {
    return _client.default.listen('*[_id == $id]', {
      id: id
    }, {
      includeResult: false,
      events: ['welcome', 'mutation', 'reconnect']
    }).pipe((0, _operators.concatMap)(function (event) {
      return event.type === 'welcome' ? fetchDocumentSnapshot(id) : (0, _rxjs.of)(event);
    }));
  },
  query: function query(_query, params) {
    return (0, _rxjs.defer)(function () {
      return _client.default.observable.listen(_query, params || {}, {
        includeResult: false,
        events: ['welcome', 'mutation', 'reconnect']
      });
    }).pipe((0, _operators.concatMap)(function (event) {
      return event.type === 'welcome' ? fetchQuerySnapshot(_query, params) : (0, _rxjs.of)(event);
    }));
  },
  mutate: function mutate(mutations) {
    return _client.default.observable.dataRequest('mutate', mutations, {
      visibility: 'async',
      returnDocuments: false
    });
  },
  delete: function _delete(id) {
    return _client.default.observable.delete(id, {
      visibility: 'async',
      returnDocuments: false
    });
  },
  create: function create(doc) {
    return _client.default.observable.create(doc);
  },
  createIfNotExists: function createIfNotExists(doc) {
    return _client.default.observable.createIfNotExists(doc);
  },
  createOrReplace: function createOrReplace(doc) {
    return _client.default.observable.createOrReplace(doc);
  }
};

var _default = (0, _documentStore.default)({
  serverConnection: serverConnection
});

exports.default = _default;