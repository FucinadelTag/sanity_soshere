"use strict";

var _geopoint = _interopRequireDefault(require("./types/geopoint"));

var _imageAsset = _interopRequireDefault(require("./types/imageAsset"));

var _fileAsset = _interopRequireDefault(require("./types/fileAsset"));

var _schema = _interopRequireDefault(require("@sanity/schema"));

var _schema2 = _interopRequireDefault(require("part:@sanity/form-builder/input/legacy-date/schema?"));

var _validateSchema = _interopRequireDefault(require("@sanity/schema/lib/sanity/validateSchema"));

var _groupProblems = _interopRequireDefault(require("@sanity/schema/lib/sanity/groupProblems"));

var _validation = require("@sanity/validation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var isError = function isError(problem) {
  return problem.severity === 'error';
};

module.exports = function (schemaDef) {
  var validated = (0, _validateSchema.default)(schemaDef.types).getTypes();
  var validation = (0, _groupProblems.default)(validated);
  var hasErrors = validation.some(function (group) {
    return group.problems.some(isError);
  });
  var types = [];

  if (!hasErrors) {
    types = _toConsumableArray(schemaDef.types).concat([_geopoint.default, _schema2.default, _imageAsset.default, _fileAsset.default]).filter(Boolean);
  }

  var compiled = _schema.default.compile({
    name: schemaDef.name,
    types: types
  });

  compiled._source = schemaDef;
  compiled._validation = validation;
  return (0, _validation.inferFromSchema)(compiled);
};