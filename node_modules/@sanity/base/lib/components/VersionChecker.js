"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _semverCompare = _interopRequireDefault(require("semver-compare"));

var _sanityVersions = _interopRequireDefault(require("sanity:versions"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen?"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _FullscreenError = _interopRequireDefault(require("./FullscreenError"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var fakeOutdatedModule = false;
var fakeOutdatedModuleSeverity = 'high';

var applySeverity = function applySeverity(inp) {
  return inp;
};

if (fakeOutdatedModule) {
  _sanityVersions.default['@sanity/base'] = '0.118.0';

  applySeverity = function applySeverity(inp) {
    var mod = inp && inp.outdated.find(function (item) {
      return item.name === '@sanity/base';
    }) || {};
    mod.severity = fakeOutdatedModuleSeverity;
    return inp;
  };
}

var onIdle = typeof window.requestIdleCallback === 'function' ? window.requestIdleCallback : function (cb) {
  return setTimeout(cb, 0);
}; // eslint-disable-next-line id-length

var buildQueryString = function buildQueryString() {
  return {
    m: Object.keys(_sanityVersions.default).map(function (pkg) {
      return "".concat(pkg, "@").concat(_sanityVersions.default[pkg]);
    })
  };
};

var hashQuery = function hashQuery(items) {
  return items.join(',').replace(/@?sanity[/-]/g, '');
};

var storage = typeof sessionStorage === 'undefined' ? {} : sessionStorage;

var onVersionCheckError = function onVersionCheckError(err) {
  // eslint-disable-next-line no-console
  console.warn('Module versions check failed. Dependencies *might* be out of date.', err);
};

var breakify = function breakify(lines) {
  var nodes = [];

  for (var i = 0; i < lines.length; i++) {
    nodes.push(lines[i]);

    if (i !== lines.length - 1) {
      nodes.push(_react.default.createElement("br", {
        key: i
      }));
    }
  }

  return nodes;
};

var paragraphify = function paragraphify(text) {
  return text.split('\n\n').map(function (para, i) {
    var lines = para.split('\n'); // eslint-disable-next-line react/no-array-index-key

    return _react.default.createElement("p", {
      key: i
    }, breakify(lines));
  });
};

var getLatestInstalled = function getLatestInstalled() {
  var versionNums = Object.keys(_sanityVersions.default).map(function (pkg) {
    return _sanityVersions.default[pkg];
  });
  var sorted = versionNums.sort(_semverCompare.default);
  return sorted[sorted.length - 1];
};

var checkVersions = function checkVersions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getOutdated = options.getOutdated;
  var query = buildQueryString();
  var hash = hashQuery(query.m);
  var local = storage.versionCheck && storage.versionCheck.indexOf(hash) === 0 && storage.versionCheck.slice(hash.length + 1);

  if (!getOutdated && local) {
    return Promise.resolve({
      result: JSON.parse(local)
    });
  }

  return _client.default.request({
    uri: '/versions',
    query: buildQueryString(),
    json: true
  }).then(function (result) {
    return {
      hash: hash,
      result: applySeverity(result)
    };
  });
};

var VersionChecker =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(VersionChecker, _PureComponent);

  function VersionChecker() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, VersionChecker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VersionChecker)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {};
    _this.onResponse = _this.onResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(VersionChecker, [{
    key: "onResponse",
    value: function onResponse(res) {
      // Don't include outdated modules in the stored result
      var result = (0, _omit2.default)(res.result, ['outdated']);

      if (result.hash && storage) {
        storage.versionCheck = [res.hash, JSON.stringify(result)].join('|');
      } // If we have unsupported modules, we want to show a dialog


      if (!result.isSupported) {
        this.setState({
          result: result
        });
      }

      if (__DEV__ && res.result && res.result.outdated) {
        var modules = res.result.outdated.map(function (mod) {
          return mod.name;
        }).join('\n  - ');
        var instructions = 'Run `sanity upgrade` to update them'; // eslint-disable-next-line no-console

        console.warn("The following modules are outdated:\n  - ".concat(modules, "\n\n").concat(instructions));
      }
    }
  }, {
    key: "handleClose",
    value: function handleClose() {
      this.setState({
        result: null
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      onIdle(function () {
        checkVersions().then(_this2.onResponse).catch(onVersionCheckError);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var result = this.state.result;

      if (!result || result.isSupported || result.isSupported === undefined) {
        return null;
      }

      var Dialog = _fullscreen.default || _FullscreenError.default;
      var title = 'Unsupported module versions';
      return _react.default.createElement(Dialog, {
        centered: true,
        isOpen: true,
        color: "danger",
        title: title,
        onClose: this.handleClose
      }, paragraphify(result.message || ''), result.helpUrl && _react.default.createElement("p", null, "For more information, please read ", _react.default.createElement("a", {
        href: result.helpUrl
      }, result.helpUrl)));
    }
  }]);

  return VersionChecker;
}(_react.PureComponent);

VersionChecker.checkVersions = checkVersions;
VersionChecker.getLatestInstalled = getLatestInstalled;
var _default = VersionChecker;
exports.default = _default;