"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _intl = require("part:@sanity/base/locale/intl");

var _formatters = require("part:@sanity/base/locale/formatters");

var _languageResolver = require("part:@sanity/base/language-resolver");

var _localeMessageFetcher = _interopRequireDefault(require("part:@sanity/base/locale-message-fetcher"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var SanityIntlProvider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SanityIntlProvider, _React$Component);

  function SanityIntlProvider(props) {
    var _this;

    _classCallCheck(this, SanityIntlProvider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SanityIntlProvider).call(this, props));
    _this.catchError = _this.catchError.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.state = {
      messages: null,
      language: null,
      error: null
    };
    return _this;
  }

  _createClass(SanityIntlProvider, [{
    key: "catchError",
    value: function catchError(err) {
      console.error(err); // eslint-disable-line no-console

      this.setState({
        error: err
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var supportedLanguages = this.props.supportedLanguages;
      (0, _languageResolver.resolveLanguage)(supportedLanguages).then(function (language) {
        _localeMessageFetcher.default.fetchLocalizedMessages(language).then(function (localizedMessages) {
          var languagePrefix = language.split('-')[0];

          var localeData = require("react-intl/locale-data/".concat(languagePrefix));

          (0, _intl.addLocaleData)(localeData); // In order to get a proper stacktrace on rendering errors,
          // we need to move this out of the current call stack

          _this2.mountTimer = setTimeout(function () {
            _this2.setState({
              messages: localizedMessages,
              language: language
            });
          }, 0);
        }).catch(_this2.catchError);
      }).catch(this.catchError);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.mountTimer);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          messages = _this$state.messages,
          language = _this$state.language,
          error = _this$state.error;

      if (error) {
        return _react.default.createElement("div", null, _react.default.createElement("h2", null, "Error fetching locale data"), _react.default.createElement("code", null, _react.default.createElement("pre", null, error.stack)));
      }

      if (!messages) {
        return _react.default.createElement(_spinner.default, {
          fullscreen: true,
          message: "Loading locale messages..."
        });
      }

      return _react.default.createElement(_intl.IntlProvider, {
        locale: language,
        messages: messages
      }, _react.default.createElement(_formatters.IntlWrapper, null, this.props.children));
    }
  }]);

  return SanityIntlProvider;
}(_react.default.Component);

SanityIntlProvider.propTypes = {
  children: _propTypes.default.node,
  supportedLanguages: _propTypes.default.arrayOf(_propTypes.default.string)
};
var _default = SanityIntlProvider;
exports.default = _default;