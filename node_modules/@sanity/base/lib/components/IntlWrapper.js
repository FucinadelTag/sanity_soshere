"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMessage = exports.formatHTMLMessage = exports.formatRelative = exports.formatPlural = exports.formatNumber = exports.formatTime = exports.formatDate = exports.IntlWrapper = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _intl2 = require("part:@sanity/base/locale/intl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var intl = null;

var IntlWrapper =
/*#__PURE__*/
function (_React$Component) {
  _inherits(IntlWrapper, _React$Component);

  function IntlWrapper() {
    _classCallCheck(this, IntlWrapper);

    return _possibleConstructorReturn(this, _getPrototypeOf(IntlWrapper).apply(this, arguments));
  }

  _createClass(IntlWrapper, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      intl = this.context.intl;
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate() {
      intl = this.context.intl;
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", null, this.props.children);
    }
  }]);

  return IntlWrapper;
}(_react.default.Component);

exports.IntlWrapper = IntlWrapper;

_defineProperty(IntlWrapper, "contextTypes", {
  intl: _intl2.intlShape
});

_defineProperty(IntlWrapper, "propTypes", {
  children: _propTypes.default.node.isRequired
});

var proxies = ['formatDate', 'formatTime', 'formatRelative', 'formatNumber', 'formatPlural', 'formatMessage', 'formatHTMLMessage'].reduce(function (target, fnName) {
  target[fnName] = function () {
    var _intl;

    if (!intl) {
      throw new Error('IntlWrapper must be mounted before using format* functions');
    }

    return (_intl = intl)[fnName].apply(_intl, arguments);
  };

  return target;
}, {});
var formatDate = proxies.formatDate;
exports.formatDate = formatDate;
var formatTime = proxies.formatTime;
exports.formatTime = formatTime;
var formatNumber = proxies.formatNumber;
exports.formatNumber = formatNumber;
var formatPlural = proxies.formatPlural;
exports.formatPlural = formatPlural;
var formatRelative = proxies.formatRelative;
exports.formatRelative = formatRelative;

var formatHTMLMessage = function formatHTMLMessage(desc, values) {
  return typeof desc === 'string' ? proxies.formatHTMLMessage({
    id: desc
  }, values) : proxies.formatHTMLMessage(desc, values);
};

exports.formatHTMLMessage = formatHTMLMessage;

var formatMessage = function formatMessage(desc, values) {
  return typeof desc === 'string' ? proxies.formatMessage({
    id: desc
  }, values) : proxies.formatMessage(desc, values);
};

exports.formatMessage = formatMessage;